/*
Vatstack API Specification

A suite of VAT APIs which let you validate VAT numbers with government services, look up VAT rates by ISO country code, calculate price quotes with centralized VAT rules and store transactions with each sale for VAT reporting.

API version: 1.3.0
Contact: team@vatstack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vatstack

import (
	"encoding/json"
)

// checks if the EvidenceIpAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvidenceIpAddress{}

// EvidenceIpAddress struct for EvidenceIpAddress
type EvidenceIpAddress struct {
	// The same IP address coming from the `ip_address.label` body parameter which will be geolocated automatically.
	Label *string `json:"label,omitempty"`
	// Provider used to geolocate `ip_address.label`. We use MaxMindÂ® GeoIP2 geolocation technology by default but have a number of fallback providers.
	Provider *string `json:"provider,omitempty"`
	// City of the geolocated IP address.
	City *string `json:"city,omitempty"`
	// 2-letter ISO country code of the geolocated IP address.
	CountryCode *string `json:"country_code,omitempty"`
	// State of the geolocated IP address.
	State *string `json:"state,omitempty"`
}

// NewEvidenceIpAddress instantiates a new EvidenceIpAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvidenceIpAddress() *EvidenceIpAddress {
	this := EvidenceIpAddress{}
	return &this
}

// NewEvidenceIpAddressWithDefaults instantiates a new EvidenceIpAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvidenceIpAddressWithDefaults() *EvidenceIpAddress {
	this := EvidenceIpAddress{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *EvidenceIpAddress) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceIpAddress) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *EvidenceIpAddress) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *EvidenceIpAddress) SetLabel(v string) {
	o.Label = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *EvidenceIpAddress) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceIpAddress) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *EvidenceIpAddress) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *EvidenceIpAddress) SetProvider(v string) {
	o.Provider = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *EvidenceIpAddress) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceIpAddress) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *EvidenceIpAddress) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *EvidenceIpAddress) SetCity(v string) {
	o.City = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *EvidenceIpAddress) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceIpAddress) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *EvidenceIpAddress) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *EvidenceIpAddress) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *EvidenceIpAddress) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceIpAddress) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *EvidenceIpAddress) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *EvidenceIpAddress) SetState(v string) {
	o.State = &v
}

func (o EvidenceIpAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvidenceIpAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableEvidenceIpAddress struct {
	value *EvidenceIpAddress
	isSet bool
}

func (v NullableEvidenceIpAddress) Get() *EvidenceIpAddress {
	return v.value
}

func (v *NullableEvidenceIpAddress) Set(val *EvidenceIpAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableEvidenceIpAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableEvidenceIpAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvidenceIpAddress(val *EvidenceIpAddress) *NullableEvidenceIpAddress {
	return &NullableEvidenceIpAddress{value: val, isSet: true}
}

func (v NullableEvidenceIpAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvidenceIpAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


