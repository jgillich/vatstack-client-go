/*
Vatstack API Specification

A suite of VAT APIs which let you validate VAT numbers with government services, look up VAT rates by ISO country code, calculate price quotes with centralized VAT rules and store transactions with each sale for VAT reporting.

API version: 1.3.0
Contact: team@vatstack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vatstack

import (
	"encoding/json"
)

// checks if the HitSupplies type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HitSupplies{}

// HitSupplies struct for HitSupplies
type HitSupplies struct {
	// Included supplies in the plan you’re subscribed to.
	Capacity *int32 `json:"capacity,omitempty"`
	// Supplies created during the running month. Additional requests beyond `capacity` will be charged according to the plan you’re subscribed to.
	Used *int32 `json:"used,omitempty"`
}

// NewHitSupplies instantiates a new HitSupplies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHitSupplies() *HitSupplies {
	this := HitSupplies{}
	return &this
}

// NewHitSuppliesWithDefaults instantiates a new HitSupplies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHitSuppliesWithDefaults() *HitSupplies {
	this := HitSupplies{}
	return &this
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *HitSupplies) GetCapacity() int32 {
	if o == nil || IsNil(o.Capacity) {
		var ret int32
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HitSupplies) GetCapacityOk() (*int32, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *HitSupplies) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given int32 and assigns it to the Capacity field.
func (o *HitSupplies) SetCapacity(v int32) {
	o.Capacity = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *HitSupplies) GetUsed() int32 {
	if o == nil || IsNil(o.Used) {
		var ret int32
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HitSupplies) GetUsedOk() (*int32, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *HitSupplies) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given int32 and assigns it to the Used field.
func (o *HitSupplies) SetUsed(v int32) {
	o.Used = &v
}

func (o HitSupplies) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HitSupplies) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}
	return toSerialize, nil
}

type NullableHitSupplies struct {
	value *HitSupplies
	isSet bool
}

func (v NullableHitSupplies) Get() *HitSupplies {
	return v.value
}

func (v *NullableHitSupplies) Set(val *HitSupplies) {
	v.value = val
	v.isSet = true
}

func (v NullableHitSupplies) IsSet() bool {
	return v.isSet
}

func (v *NullableHitSupplies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHitSupplies(val *HitSupplies) *NullableHitSupplies {
	return &NullableHitSupplies{value: val, isSet: true}
}

func (v NullableHitSupplies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHitSupplies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


