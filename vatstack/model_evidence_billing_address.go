/*
Vatstack API Specification

A suite of VAT APIs which let you validate VAT numbers with government services, look up VAT rates by ISO country code, calculate price quotes with centralized VAT rules and store transactions with each sale for VAT reporting.

API version: 1.3.0
Contact: team@vatstack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vatstack

import (
	"encoding/json"
)

// checks if the EvidenceBillingAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvidenceBillingAddress{}

// EvidenceBillingAddress struct for EvidenceBillingAddress
type EvidenceBillingAddress struct {
	// City of the customer’s billing address.
	City *string `json:"city,omitempty"`
	// 2-letter ISO country code of the customer’s billing address.
	CountryCode *string `json:"country_code,omitempty"`
	// Line 1 of the customer’s billing address.
	Line1 *string `json:"line_1,omitempty"`
	// Line 2 of the customer’s billing address.
	Line2 *string `json:"line_2,omitempty"`
	// Postal code of the customer’s billing address.
	PostalCode *string `json:"postal_code,omitempty"`
	// State of the customer’s billing address.
	State *string `json:"state,omitempty"`
}

// NewEvidenceBillingAddress instantiates a new EvidenceBillingAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvidenceBillingAddress() *EvidenceBillingAddress {
	this := EvidenceBillingAddress{}
	return &this
}

// NewEvidenceBillingAddressWithDefaults instantiates a new EvidenceBillingAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvidenceBillingAddressWithDefaults() *EvidenceBillingAddress {
	this := EvidenceBillingAddress{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *EvidenceBillingAddress) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceBillingAddress) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *EvidenceBillingAddress) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *EvidenceBillingAddress) SetCity(v string) {
	o.City = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *EvidenceBillingAddress) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceBillingAddress) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *EvidenceBillingAddress) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *EvidenceBillingAddress) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetLine1 returns the Line1 field value if set, zero value otherwise.
func (o *EvidenceBillingAddress) GetLine1() string {
	if o == nil || IsNil(o.Line1) {
		var ret string
		return ret
	}
	return *o.Line1
}

// GetLine1Ok returns a tuple with the Line1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceBillingAddress) GetLine1Ok() (*string, bool) {
	if o == nil || IsNil(o.Line1) {
		return nil, false
	}
	return o.Line1, true
}

// HasLine1 returns a boolean if a field has been set.
func (o *EvidenceBillingAddress) HasLine1() bool {
	if o != nil && !IsNil(o.Line1) {
		return true
	}

	return false
}

// SetLine1 gets a reference to the given string and assigns it to the Line1 field.
func (o *EvidenceBillingAddress) SetLine1(v string) {
	o.Line1 = &v
}

// GetLine2 returns the Line2 field value if set, zero value otherwise.
func (o *EvidenceBillingAddress) GetLine2() string {
	if o == nil || IsNil(o.Line2) {
		var ret string
		return ret
	}
	return *o.Line2
}

// GetLine2Ok returns a tuple with the Line2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceBillingAddress) GetLine2Ok() (*string, bool) {
	if o == nil || IsNil(o.Line2) {
		return nil, false
	}
	return o.Line2, true
}

// HasLine2 returns a boolean if a field has been set.
func (o *EvidenceBillingAddress) HasLine2() bool {
	if o != nil && !IsNil(o.Line2) {
		return true
	}

	return false
}

// SetLine2 gets a reference to the given string and assigns it to the Line2 field.
func (o *EvidenceBillingAddress) SetLine2(v string) {
	o.Line2 = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *EvidenceBillingAddress) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceBillingAddress) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *EvidenceBillingAddress) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *EvidenceBillingAddress) SetPostalCode(v string) {
	o.PostalCode = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *EvidenceBillingAddress) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceBillingAddress) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *EvidenceBillingAddress) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *EvidenceBillingAddress) SetState(v string) {
	o.State = &v
}

func (o EvidenceBillingAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvidenceBillingAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.Line1) {
		toSerialize["line_1"] = o.Line1
	}
	if !IsNil(o.Line2) {
		toSerialize["line_2"] = o.Line2
	}
	if !IsNil(o.PostalCode) {
		toSerialize["postal_code"] = o.PostalCode
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableEvidenceBillingAddress struct {
	value *EvidenceBillingAddress
	isSet bool
}

func (v NullableEvidenceBillingAddress) Get() *EvidenceBillingAddress {
	return v.value
}

func (v *NullableEvidenceBillingAddress) Set(val *EvidenceBillingAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableEvidenceBillingAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableEvidenceBillingAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvidenceBillingAddress(val *EvidenceBillingAddress) *NullableEvidenceBillingAddress {
	return &NullableEvidenceBillingAddress{value: val, isSet: true}
}

func (v NullableEvidenceBillingAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvidenceBillingAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


