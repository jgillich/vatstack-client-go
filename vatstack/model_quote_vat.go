/*
Vatstack API Specification

A suite of VAT APIs which let you validate VAT numbers with government services, look up VAT rates by ISO country code, calculate price quotes with centralized VAT rules and store transactions with each sale for VAT reporting.

API version: 1.3.0
Contact: team@vatstack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vatstack

import (
	"encoding/json"
)

// checks if the QuoteVat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuoteVat{}

// QuoteVat struct for QuoteVat
type QuoteVat struct {
	// Abbreviation of `vat.local_name`.
	Abbreviation *string `json:"abbreviation,omitempty"`
	// VAT amount in cents.
	Amount *int32 `json:"amount,omitempty"`
	// Specifies if the `amount_total` is inclusive (common for EU consumers) or exclusive of VAT. This affects how the `vat.amount` is calculated. If `false`, you should present `amount` plus `vat.amount` to your customer as the final price to pay.
	Inclusive *string `json:"inclusive,omitempty"`
	// Localized name of the VAT.
	LocalName *string `json:"local_name,omitempty"`
	// VAT rate applied for the calculation. If member_state is `false`, the value will be `0`.
	Rate *float64 `json:"rate,omitempty"`
	// Automatically determined type of VAT rate based on inputs. Can be `null`, `exempt`, `reduced`, `reverse_charge`, `standard` or `zero`.
	RateType *string `json:"rate_type,omitempty"`
}

// NewQuoteVat instantiates a new QuoteVat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuoteVat() *QuoteVat {
	this := QuoteVat{}
	var inclusive string = "false"
	this.Inclusive = &inclusive
	return &this
}

// NewQuoteVatWithDefaults instantiates a new QuoteVat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteVatWithDefaults() *QuoteVat {
	this := QuoteVat{}
	var inclusive string = "false"
	this.Inclusive = &inclusive
	return &this
}

// GetAbbreviation returns the Abbreviation field value if set, zero value otherwise.
func (o *QuoteVat) GetAbbreviation() string {
	if o == nil || IsNil(o.Abbreviation) {
		var ret string
		return ret
	}
	return *o.Abbreviation
}

// GetAbbreviationOk returns a tuple with the Abbreviation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteVat) GetAbbreviationOk() (*string, bool) {
	if o == nil || IsNil(o.Abbreviation) {
		return nil, false
	}
	return o.Abbreviation, true
}

// HasAbbreviation returns a boolean if a field has been set.
func (o *QuoteVat) HasAbbreviation() bool {
	if o != nil && !IsNil(o.Abbreviation) {
		return true
	}

	return false
}

// SetAbbreviation gets a reference to the given string and assigns it to the Abbreviation field.
func (o *QuoteVat) SetAbbreviation(v string) {
	o.Abbreviation = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *QuoteVat) GetAmount() int32 {
	if o == nil || IsNil(o.Amount) {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteVat) GetAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *QuoteVat) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *QuoteVat) SetAmount(v int32) {
	o.Amount = &v
}

// GetInclusive returns the Inclusive field value if set, zero value otherwise.
func (o *QuoteVat) GetInclusive() string {
	if o == nil || IsNil(o.Inclusive) {
		var ret string
		return ret
	}
	return *o.Inclusive
}

// GetInclusiveOk returns a tuple with the Inclusive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteVat) GetInclusiveOk() (*string, bool) {
	if o == nil || IsNil(o.Inclusive) {
		return nil, false
	}
	return o.Inclusive, true
}

// HasInclusive returns a boolean if a field has been set.
func (o *QuoteVat) HasInclusive() bool {
	if o != nil && !IsNil(o.Inclusive) {
		return true
	}

	return false
}

// SetInclusive gets a reference to the given string and assigns it to the Inclusive field.
func (o *QuoteVat) SetInclusive(v string) {
	o.Inclusive = &v
}

// GetLocalName returns the LocalName field value if set, zero value otherwise.
func (o *QuoteVat) GetLocalName() string {
	if o == nil || IsNil(o.LocalName) {
		var ret string
		return ret
	}
	return *o.LocalName
}

// GetLocalNameOk returns a tuple with the LocalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteVat) GetLocalNameOk() (*string, bool) {
	if o == nil || IsNil(o.LocalName) {
		return nil, false
	}
	return o.LocalName, true
}

// HasLocalName returns a boolean if a field has been set.
func (o *QuoteVat) HasLocalName() bool {
	if o != nil && !IsNil(o.LocalName) {
		return true
	}

	return false
}

// SetLocalName gets a reference to the given string and assigns it to the LocalName field.
func (o *QuoteVat) SetLocalName(v string) {
	o.LocalName = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *QuoteVat) GetRate() float64 {
	if o == nil || IsNil(o.Rate) {
		var ret float64
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteVat) GetRateOk() (*float64, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *QuoteVat) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given float64 and assigns it to the Rate field.
func (o *QuoteVat) SetRate(v float64) {
	o.Rate = &v
}

// GetRateType returns the RateType field value if set, zero value otherwise.
func (o *QuoteVat) GetRateType() string {
	if o == nil || IsNil(o.RateType) {
		var ret string
		return ret
	}
	return *o.RateType
}

// GetRateTypeOk returns a tuple with the RateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuoteVat) GetRateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RateType) {
		return nil, false
	}
	return o.RateType, true
}

// HasRateType returns a boolean if a field has been set.
func (o *QuoteVat) HasRateType() bool {
	if o != nil && !IsNil(o.RateType) {
		return true
	}

	return false
}

// SetRateType gets a reference to the given string and assigns it to the RateType field.
func (o *QuoteVat) SetRateType(v string) {
	o.RateType = &v
}

func (o QuoteVat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuoteVat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Abbreviation) {
		toSerialize["abbreviation"] = o.Abbreviation
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Inclusive) {
		toSerialize["inclusive"] = o.Inclusive
	}
	if !IsNil(o.LocalName) {
		toSerialize["local_name"] = o.LocalName
	}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	if !IsNil(o.RateType) {
		toSerialize["rate_type"] = o.RateType
	}
	return toSerialize, nil
}

type NullableQuoteVat struct {
	value *QuoteVat
	isSet bool
}

func (v NullableQuoteVat) Get() *QuoteVat {
	return v.value
}

func (v *NullableQuoteVat) Set(val *QuoteVat) {
	v.value = val
	v.isSet = true
}

func (v NullableQuoteVat) IsSet() bool {
	return v.isSet
}

func (v *NullableQuoteVat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuoteVat(val *QuoteVat) *NullableQuoteVat {
	return &NullableQuoteVat{value: val, isSet: true}
}

func (v NullableQuoteVat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuoteVat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


