/*
Vatstack API Specification

A suite of VAT APIs which let you validate VAT numbers with government services, look up VAT rates by ISO country code, calculate price quotes with centralized VAT rules and store transactions with each sale for VAT reporting.

API version: 1.3.0
Contact: team@vatstack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vatstack

import (
	"encoding/json"
	"time"
)

// checks if the Quote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Quote{}

// Quote The quote object combines the best of the [rate object](https://vatstack.com/docs/rates) and [validation object](https://vatstack.com/docs/validations) and takes them a step further. It uses your existing business information to perform the entire VAT-compliant business logic for you. All VAT rules have been centralized so that every response is directly actionable.
type Quote struct {
	Amount *int32 `json:"amount,omitempty"`
	AmountTotal *int32 `json:"amount_total,omitempty"`
	// Category of the digital product. Defaults to `null` if no category was specified in the request or if the category cannot be applied for the `country_code`.
	Category *string `json:"category,omitempty"`
	// 2-letter ISO country code.
	CountryCode *string `json:"country_code,omitempty"`
	// Corresponding English name of `country_code`.
	CountryName *string `json:"country_name,omitempty"`
	// ISO date at which the object was created.
	Created *time.Time `json:"created,omitempty"`
	// Unique identifier for the object.
	Id *string `json:"id,omitempty"`
	// The same IP address coming from the `ip_address` body parameter, or the geolocated IP address if none was provided. Value is `null` if `country_code` was provided.
	IpAddress *string `json:"ip_address,omitempty"`
	// Localized name of the VAT identification number.
	LocalName *string `json:"local_name,omitempty"`
	// Boolean indicating whether `country_code` is an EU member state.
	MemberState *bool `json:"member_state,omitempty"`
	// ISO date at which the object was updated.
	Updated *time.Time `json:"updated,omitempty"`
	Validation Validation `json:"validation,omitempty"`
	Vat *QuoteVat `json:"vat,omitempty"`
}

// NewQuote instantiates a new Quote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuote() *Quote {
	this := Quote{}
	return &this
}

// NewQuoteWithDefaults instantiates a new Quote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteWithDefaults() *Quote {
	this := Quote{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Quote) GetAmount() int32 {
	if o == nil || IsNil(o.Amount) {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Quote) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *Quote) SetAmount(v int32) {
	o.Amount = &v
}

// GetAmountTotal returns the AmountTotal field value if set, zero value otherwise.
func (o *Quote) GetAmountTotal() int32 {
	if o == nil || IsNil(o.AmountTotal) {
		var ret int32
		return ret
	}
	return *o.AmountTotal
}

// GetAmountTotalOk returns a tuple with the AmountTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetAmountTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.AmountTotal) {
		return nil, false
	}
	return o.AmountTotal, true
}

// HasAmountTotal returns a boolean if a field has been set.
func (o *Quote) HasAmountTotal() bool {
	if o != nil && !IsNil(o.AmountTotal) {
		return true
	}

	return false
}

// SetAmountTotal gets a reference to the given int32 and assigns it to the AmountTotal field.
func (o *Quote) SetAmountTotal(v int32) {
	o.AmountTotal = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Quote) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Quote) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *Quote) SetCategory(v string) {
	o.Category = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *Quote) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *Quote) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *Quote) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetCountryName returns the CountryName field value if set, zero value otherwise.
func (o *Quote) GetCountryName() string {
	if o == nil || IsNil(o.CountryName) {
		var ret string
		return ret
	}
	return *o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetCountryNameOk() (*string, bool) {
	if o == nil || IsNil(o.CountryName) {
		return nil, false
	}
	return o.CountryName, true
}

// HasCountryName returns a boolean if a field has been set.
func (o *Quote) HasCountryName() bool {
	if o != nil && !IsNil(o.CountryName) {
		return true
	}

	return false
}

// SetCountryName gets a reference to the given string and assigns it to the CountryName field.
func (o *Quote) SetCountryName(v string) {
	o.CountryName = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Quote) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Quote) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Quote) SetCreated(v time.Time) {
	o.Created = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Quote) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Quote) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Quote) SetId(v string) {
	o.Id = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *Quote) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *Quote) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *Quote) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetLocalName returns the LocalName field value if set, zero value otherwise.
func (o *Quote) GetLocalName() string {
	if o == nil || IsNil(o.LocalName) {
		var ret string
		return ret
	}
	return *o.LocalName
}

// GetLocalNameOk returns a tuple with the LocalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetLocalNameOk() (*string, bool) {
	if o == nil || IsNil(o.LocalName) {
		return nil, false
	}
	return o.LocalName, true
}

// HasLocalName returns a boolean if a field has been set.
func (o *Quote) HasLocalName() bool {
	if o != nil && !IsNil(o.LocalName) {
		return true
	}

	return false
}

// SetLocalName gets a reference to the given string and assigns it to the LocalName field.
func (o *Quote) SetLocalName(v string) {
	o.LocalName = &v
}

// GetMemberState returns the MemberState field value if set, zero value otherwise.
func (o *Quote) GetMemberState() bool {
	if o == nil || IsNil(o.MemberState) {
		var ret bool
		return ret
	}
	return *o.MemberState
}

// GetMemberStateOk returns a tuple with the MemberState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetMemberStateOk() (*bool, bool) {
	if o == nil || IsNil(o.MemberState) {
		return nil, false
	}
	return o.MemberState, true
}

// HasMemberState returns a boolean if a field has been set.
func (o *Quote) HasMemberState() bool {
	if o != nil && !IsNil(o.MemberState) {
		return true
	}

	return false
}

// SetMemberState gets a reference to the given bool and assigns it to the MemberState field.
func (o *Quote) SetMemberState(v bool) {
	o.MemberState = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *Quote) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Quote) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *Quote) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetValidation returns the Validation field value if set, zero value otherwise.
func (o *Quote) GetValidation() Validation {
	if o == nil || IsNil(o.Validation) {
		var ret Validation
		return ret
	}
	return o.Validation
}

// GetValidationOk returns a tuple with the Validation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetValidationOk() (Validation, bool) {
	if o == nil || IsNil(o.Validation) {
		return Validation{}, false
	}
	return o.Validation, true
}

// HasValidation returns a boolean if a field has been set.
func (o *Quote) HasValidation() bool {
	if o != nil && !IsNil(o.Validation) {
		return true
	}

	return false
}

// SetValidation gets a reference to the given Validation and assigns it to the Validation field.
func (o *Quote) SetValidation(v Validation) {
	o.Validation = v
}

// GetVat returns the Vat field value if set, zero value otherwise.
func (o *Quote) GetVat() QuoteVat {
	if o == nil || IsNil(o.Vat) {
		var ret QuoteVat
		return ret
	}
	return *o.Vat
}

// GetVatOk returns a tuple with the Vat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetVatOk() (*QuoteVat, bool) {
	if o == nil || IsNil(o.Vat) {
		return nil, false
	}
	return o.Vat, true
}

// HasVat returns a boolean if a field has been set.
func (o *Quote) HasVat() bool {
	if o != nil && !IsNil(o.Vat) {
		return true
	}

	return false
}

// SetVat gets a reference to the given QuoteVat and assigns it to the Vat field.
func (o *Quote) SetVat(v QuoteVat) {
	o.Vat = &v
}

func (o Quote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Quote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.AmountTotal) {
		toSerialize["amount_total"] = o.AmountTotal
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.CountryName) {
		toSerialize["country_name"] = o.CountryName
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	if !IsNil(o.LocalName) {
		toSerialize["local_name"] = o.LocalName
	}
	if !IsNil(o.MemberState) {
		toSerialize["member_state"] = o.MemberState
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.Validation) {
		toSerialize["validation"] = o.Validation
	}
	if !IsNil(o.Vat) {
		toSerialize["vat"] = o.Vat
	}
	return toSerialize, nil
}

type NullableQuote struct {
	value *Quote
	isSet bool
}

func (v NullableQuote) Get() *Quote {
	return v.value
}

func (v *NullableQuote) Set(val *Quote) {
	v.value = val
	v.isSet = true
}

func (v NullableQuote) IsSet() bool {
	return v.isSet
}

func (v *NullableQuote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuote(val *Quote) *NullableQuote {
	return &NullableQuote{value: val, isSet: true}
}

func (v NullableQuote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


