/*
Vatstack API Specification

A suite of VAT APIs which let you validate VAT numbers with government services, look up VAT rates by ISO country code, calculate price quotes with centralized VAT rules and store transactions with each sale for VAT reporting.

API version: 1.3.0
Contact: team@vatstack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vatstack

import (
	"encoding/json"
	"time"
)

// checks if the Supply type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Supply{}

// Supply Supplies are transactions of telecommunications, broadcasting and electronic (TBE) services. To document pieces of evidence for the place of supply, you can attach [evidence objects](https://vatstack.com/docs/evidences) to a supply object. Supplies are also used to automatically generate a quarterly tax report with currency conversion at official exchange rates.
type Supply struct {
	Amount int32 `json:"amount"`
	AmountRefunded *int32 `json:"amount_refunded,omitempty"`
	AmountTotal *int32 `json:"amount_total,omitempty"`
	// 2-letter ISO country code of the place of supply that is relevant for the `vat.rate`.
	CountryCode string `json:"country_code"`
	// ISO date at which the object was created.
	Created *time.Time `json:"created,omitempty"`
	// 3-letter ISO 4217 currency code used to charge the `amount`.
	Currency string `json:"currency"`
	// An arbitrary string to describe the supplied item. Often useful for displaying to users.
	Description *string `json:"description,omitempty"`
	Evidence Evidence `json:"evidence,omitempty"`
	// Status of whether the attached evidence object sufficiently proves the place of supply established in `country_code`. Will be either `sufficient` or `insufficient`.
	EvidenceStatus *string `json:"evidence_status,omitempty"`
	// Unique identifier for the object.
	Id *string `json:"id,omitempty"`
	// A custom string for the invoice number issued to the customer. Itâ€™s advisable to follow sequential numbering.
	InvoiceNumber string `json:"invoice_number"`
	// ISO date at which `invoice_number` was issued.
	Issued time.Time `json:"issued"`
	// A custom string for the name of the customer.
	Name *string `json:"name,omitempty"`
	// A custom string for additional notes.
	Notes *string `json:"notes,omitempty"`
	// ISO date at which the object was updated.
	Updated *time.Time `json:"updated,omitempty"`
	Validation Validation `json:"validation,omitempty"`
	Vat *SupplyVat `json:"vat,omitempty"`
}

// NewSupply instantiates a new Supply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupply(amount int32, countryCode string, currency string, invoiceNumber string, issued time.Time) *Supply {
	this := Supply{}
	this.Amount = amount
	this.CountryCode = countryCode
	this.Currency = currency
	this.InvoiceNumber = invoiceNumber
	this.Issued = issued
	return &this
}

// NewSupplyWithDefaults instantiates a new Supply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupplyWithDefaults() *Supply {
	this := Supply{}
	return &this
}

// GetAmount returns the Amount field value
func (o *Supply) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Supply) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Supply) SetAmount(v int32) {
	o.Amount = v
}

// GetAmountRefunded returns the AmountRefunded field value if set, zero value otherwise.
func (o *Supply) GetAmountRefunded() int32 {
	if o == nil || IsNil(o.AmountRefunded) {
		var ret int32
		return ret
	}
	return *o.AmountRefunded
}

// GetAmountRefundedOk returns a tuple with the AmountRefunded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Supply) GetAmountRefundedOk() (*int32, bool) {
	if o == nil || IsNil(o.AmountRefunded) {
		return nil, false
	}
	return o.AmountRefunded, true
}

// HasAmountRefunded returns a boolean if a field has been set.
func (o *Supply) HasAmountRefunded() bool {
	if o != nil && !IsNil(o.AmountRefunded) {
		return true
	}

	return false
}

// SetAmountRefunded gets a reference to the given int32 and assigns it to the AmountRefunded field.
func (o *Supply) SetAmountRefunded(v int32) {
	o.AmountRefunded = &v
}

// GetAmountTotal returns the AmountTotal field value if set, zero value otherwise.
func (o *Supply) GetAmountTotal() int32 {
	if o == nil || IsNil(o.AmountTotal) {
		var ret int32
		return ret
	}
	return *o.AmountTotal
}

// GetAmountTotalOk returns a tuple with the AmountTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Supply) GetAmountTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.AmountTotal) {
		return nil, false
	}
	return o.AmountTotal, true
}

// HasAmountTotal returns a boolean if a field has been set.
func (o *Supply) HasAmountTotal() bool {
	if o != nil && !IsNil(o.AmountTotal) {
		return true
	}

	return false
}

// SetAmountTotal gets a reference to the given int32 and assigns it to the AmountTotal field.
func (o *Supply) SetAmountTotal(v int32) {
	o.AmountTotal = &v
}

// GetCountryCode returns the CountryCode field value
func (o *Supply) GetCountryCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
func (o *Supply) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryCode, true
}

// SetCountryCode sets field value
func (o *Supply) SetCountryCode(v string) {
	o.CountryCode = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Supply) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Supply) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Supply) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Supply) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCurrency returns the Currency field value
func (o *Supply) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Supply) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Supply) SetCurrency(v string) {
	o.Currency = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Supply) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Supply) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Supply) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Supply) SetDescription(v string) {
	o.Description = &v
}

// GetEvidence returns the Evidence field value if set, zero value otherwise.
func (o *Supply) GetEvidence() Evidence {
	if o == nil || IsNil(o.Evidence) {
		var ret Evidence
		return ret
	}
	return o.Evidence
}

// GetEvidenceOk returns a tuple with the Evidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Supply) GetEvidenceOk() (Evidence, bool) {
	if o == nil || IsNil(o.Evidence) {
		return Evidence{}, false
	}
	return o.Evidence, true
}

// HasEvidence returns a boolean if a field has been set.
func (o *Supply) HasEvidence() bool {
	if o != nil && !IsNil(o.Evidence) {
		return true
	}

	return false
}

// SetEvidence gets a reference to the given Evidence and assigns it to the Evidence field.
func (o *Supply) SetEvidence(v Evidence) {
	o.Evidence = v
}

// GetEvidenceStatus returns the EvidenceStatus field value if set, zero value otherwise.
func (o *Supply) GetEvidenceStatus() string {
	if o == nil || IsNil(o.EvidenceStatus) {
		var ret string
		return ret
	}
	return *o.EvidenceStatus
}

// GetEvidenceStatusOk returns a tuple with the EvidenceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Supply) GetEvidenceStatusOk() (*string, bool) {
	if o == nil || IsNil(o.EvidenceStatus) {
		return nil, false
	}
	return o.EvidenceStatus, true
}

// HasEvidenceStatus returns a boolean if a field has been set.
func (o *Supply) HasEvidenceStatus() bool {
	if o != nil && !IsNil(o.EvidenceStatus) {
		return true
	}

	return false
}

// SetEvidenceStatus gets a reference to the given string and assigns it to the EvidenceStatus field.
func (o *Supply) SetEvidenceStatus(v string) {
	o.EvidenceStatus = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Supply) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Supply) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Supply) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Supply) SetId(v string) {
	o.Id = &v
}

// GetInvoiceNumber returns the InvoiceNumber field value
func (o *Supply) GetInvoiceNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvoiceNumber
}

// GetInvoiceNumberOk returns a tuple with the InvoiceNumber field value
// and a boolean to check if the value has been set.
func (o *Supply) GetInvoiceNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvoiceNumber, true
}

// SetInvoiceNumber sets field value
func (o *Supply) SetInvoiceNumber(v string) {
	o.InvoiceNumber = v
}

// GetIssued returns the Issued field value
func (o *Supply) GetIssued() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Issued
}

// GetIssuedOk returns a tuple with the Issued field value
// and a boolean to check if the value has been set.
func (o *Supply) GetIssuedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issued, true
}

// SetIssued sets field value
func (o *Supply) SetIssued(v time.Time) {
	o.Issued = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Supply) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Supply) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Supply) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Supply) SetName(v string) {
	o.Name = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Supply) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Supply) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Supply) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Supply) SetNotes(v string) {
	o.Notes = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *Supply) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Supply) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Supply) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *Supply) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetValidation returns the Validation field value if set, zero value otherwise.
func (o *Supply) GetValidation() Validation {
	if o == nil || IsNil(o.Validation) {
		var ret Validation
		return ret
	}
	return o.Validation
}

// GetValidationOk returns a tuple with the Validation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Supply) GetValidationOk() (Validation, bool) {
	if o == nil || IsNil(o.Validation) {
		return Validation{}, false
	}
	return o.Validation, true
}

// HasValidation returns a boolean if a field has been set.
func (o *Supply) HasValidation() bool {
	if o != nil && !IsNil(o.Validation) {
		return true
	}

	return false
}

// SetValidation gets a reference to the given Validation and assigns it to the Validation field.
func (o *Supply) SetValidation(v Validation) {
	o.Validation = v
}

// GetVat returns the Vat field value if set, zero value otherwise.
func (o *Supply) GetVat() SupplyVat {
	if o == nil || IsNil(o.Vat) {
		var ret SupplyVat
		return ret
	}
	return *o.Vat
}

// GetVatOk returns a tuple with the Vat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Supply) GetVatOk() (*SupplyVat, bool) {
	if o == nil || IsNil(o.Vat) {
		return nil, false
	}
	return o.Vat, true
}

// HasVat returns a boolean if a field has been set.
func (o *Supply) HasVat() bool {
	if o != nil && !IsNil(o.Vat) {
		return true
	}

	return false
}

// SetVat gets a reference to the given SupplyVat and assigns it to the Vat field.
func (o *Supply) SetVat(v SupplyVat) {
	o.Vat = &v
}

func (o Supply) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Supply) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.AmountRefunded) {
		toSerialize["amount_refunded"] = o.AmountRefunded
	}
	if !IsNil(o.AmountTotal) {
		toSerialize["amount_total"] = o.AmountTotal
	}
	toSerialize["country_code"] = o.CountryCode
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	toSerialize["currency"] = o.Currency
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Evidence) {
		toSerialize["evidence"] = o.Evidence
	}
	if !IsNil(o.EvidenceStatus) {
		toSerialize["evidence_status"] = o.EvidenceStatus
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["invoice_number"] = o.InvoiceNumber
	toSerialize["issued"] = o.Issued
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.Validation) {
		toSerialize["validation"] = o.Validation
	}
	if !IsNil(o.Vat) {
		toSerialize["vat"] = o.Vat
	}
	return toSerialize, nil
}

type NullableSupply struct {
	value *Supply
	isSet bool
}

func (v NullableSupply) Get() *Supply {
	return v.value
}

func (v *NullableSupply) Set(val *Supply) {
	v.value = val
	v.isSet = true
}

func (v NullableSupply) IsSet() bool {
	return v.isSet
}

func (v *NullableSupply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupply(val *Supply) *NullableSupply {
	return &NullableSupply{value: val, isSet: true}
}

func (v NullableSupply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


