/*
Vatstack API Specification

A suite of VAT APIs which let you validate VAT numbers with government services, look up VAT rates by ISO country code, calculate price quotes with centralized VAT rules and store transactions with each sale for VAT reporting.

API version: 1.3.0
Contact: team@vatstack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vatstack

import (
	"encoding/json"
)

// checks if the EvidenceBankAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvidenceBankAddress{}

// EvidenceBankAddress struct for EvidenceBankAddress
type EvidenceBankAddress struct {
	// 2-letter ISO country code of the bank or payment source.
	CountryCode *string `json:"country_code,omitempty"`
	// Name of the bank or payment source.
	Name *string `json:"name,omitempty"`
}

// NewEvidenceBankAddress instantiates a new EvidenceBankAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvidenceBankAddress() *EvidenceBankAddress {
	this := EvidenceBankAddress{}
	return &this
}

// NewEvidenceBankAddressWithDefaults instantiates a new EvidenceBankAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvidenceBankAddressWithDefaults() *EvidenceBankAddress {
	this := EvidenceBankAddress{}
	return &this
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *EvidenceBankAddress) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceBankAddress) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *EvidenceBankAddress) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *EvidenceBankAddress) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EvidenceBankAddress) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvidenceBankAddress) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EvidenceBankAddress) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EvidenceBankAddress) SetName(v string) {
	o.Name = &v
}

func (o EvidenceBankAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvidenceBankAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableEvidenceBankAddress struct {
	value *EvidenceBankAddress
	isSet bool
}

func (v NullableEvidenceBankAddress) Get() *EvidenceBankAddress {
	return v.value
}

func (v *NullableEvidenceBankAddress) Set(val *EvidenceBankAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableEvidenceBankAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableEvidenceBankAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvidenceBankAddress(val *EvidenceBankAddress) *NullableEvidenceBankAddress {
	return &NullableEvidenceBankAddress{value: val, isSet: true}
}

func (v NullableEvidenceBankAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvidenceBankAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


