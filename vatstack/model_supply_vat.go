/*
Vatstack API Specification

A suite of VAT APIs which let you validate VAT numbers with government services, look up VAT rates by ISO country code, calculate price quotes with centralized VAT rules and store transactions with each sale for VAT reporting.

API version: 1.3.0
Contact: team@vatstack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vatstack

import (
	"encoding/json"
)

// checks if the SupplyVat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupplyVat{}

// SupplyVat struct for SupplyVat
type SupplyVat struct {
	// VAT amount in cents.
	Amount *int32 `json:"amount,omitempty"`
	// Specifies if the `amount_total` is inclusive (common for EU consumers) or exclusive of VAT. This affects how the `vat.amount` is calculated.
	Inclusive *string `json:"inclusive,omitempty"`
	// VAT rate applicable for the place of supply established in `country_code`.
	Rate *float64 `json:"rate,omitempty"`
	// Automatically determined type of VAT rate based on inputs. Can be `null`, `exempt`, `reduced`, `reverse_charge`, `standard` or `zero`.
	RateType *string `json:"rate_type,omitempty"`
}

// NewSupplyVat instantiates a new SupplyVat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupplyVat() *SupplyVat {
	this := SupplyVat{}
	var inclusive string = "false"
	this.Inclusive = &inclusive
	return &this
}

// NewSupplyVatWithDefaults instantiates a new SupplyVat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupplyVatWithDefaults() *SupplyVat {
	this := SupplyVat{}
	var inclusive string = "false"
	this.Inclusive = &inclusive
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *SupplyVat) GetAmount() int32 {
	if o == nil || IsNil(o.Amount) {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyVat) GetAmountOk() (*int32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *SupplyVat) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *SupplyVat) SetAmount(v int32) {
	o.Amount = &v
}

// GetInclusive returns the Inclusive field value if set, zero value otherwise.
func (o *SupplyVat) GetInclusive() string {
	if o == nil || IsNil(o.Inclusive) {
		var ret string
		return ret
	}
	return *o.Inclusive
}

// GetInclusiveOk returns a tuple with the Inclusive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyVat) GetInclusiveOk() (*string, bool) {
	if o == nil || IsNil(o.Inclusive) {
		return nil, false
	}
	return o.Inclusive, true
}

// HasInclusive returns a boolean if a field has been set.
func (o *SupplyVat) HasInclusive() bool {
	if o != nil && !IsNil(o.Inclusive) {
		return true
	}

	return false
}

// SetInclusive gets a reference to the given string and assigns it to the Inclusive field.
func (o *SupplyVat) SetInclusive(v string) {
	o.Inclusive = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *SupplyVat) GetRate() float64 {
	if o == nil || IsNil(o.Rate) {
		var ret float64
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyVat) GetRateOk() (*float64, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *SupplyVat) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given float64 and assigns it to the Rate field.
func (o *SupplyVat) SetRate(v float64) {
	o.Rate = &v
}

// GetRateType returns the RateType field value if set, zero value otherwise.
func (o *SupplyVat) GetRateType() string {
	if o == nil || IsNil(o.RateType) {
		var ret string
		return ret
	}
	return *o.RateType
}

// GetRateTypeOk returns a tuple with the RateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupplyVat) GetRateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RateType) {
		return nil, false
	}
	return o.RateType, true
}

// HasRateType returns a boolean if a field has been set.
func (o *SupplyVat) HasRateType() bool {
	if o != nil && !IsNil(o.RateType) {
		return true
	}

	return false
}

// SetRateType gets a reference to the given string and assigns it to the RateType field.
func (o *SupplyVat) SetRateType(v string) {
	o.RateType = &v
}

func (o SupplyVat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupplyVat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Inclusive) {
		toSerialize["inclusive"] = o.Inclusive
	}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	if !IsNil(o.RateType) {
		toSerialize["rate_type"] = o.RateType
	}
	return toSerialize, nil
}

type NullableSupplyVat struct {
	value *SupplyVat
	isSet bool
}

func (v NullableSupplyVat) Get() *SupplyVat {
	return v.value
}

func (v *NullableSupplyVat) Set(val *SupplyVat) {
	v.value = val
	v.isSet = true
}

func (v NullableSupplyVat) IsSet() bool {
	return v.isSet
}

func (v *NullableSupplyVat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupplyVat(val *SupplyVat) *NullableSupplyVat {
	return &NullableSupplyVat{value: val, isSet: true}
}

func (v NullableSupplyVat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupplyVat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


