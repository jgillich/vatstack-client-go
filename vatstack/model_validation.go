/*
Vatstack API Specification

A suite of VAT APIs which let you validate VAT numbers with government services, look up VAT rates by ISO country code, calculate price quotes with centralized VAT rules and store transactions with each sale for VAT reporting.

API version: 1.3.0
Contact: team@vatstack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vatstack

import (
	"encoding/json"
	"time"
)

// checks if the Validation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Validation{}

// Validation Validate your business customer’s VAT number against official government servers in real-time. The API asynchronously validates VAT numbers for you if government services experience downtime.
type Validation struct {
	// Boolean indicating whether the company exists and is active. Use `valid` to check whether the business is also VAT-registered.
	Active *bool `json:"active,omitempty"`
	// In the event of an error, this field will contain the error code.
	Code *string `json:"code,omitempty"`
	// Address of the company the VAT number is associated with. Servers of Germany and Spain won’t return a value for privacy reasons and will default to `null`.
	CompanyAddress *string `json:"company_address,omitempty"`
	// Name of the company the VAT number is associated with. Servers of Germany and Spain won’t return a value for privacy reasons and will default to `null`.
	CompanyName *string `json:"company_name,omitempty"`
	// Type of the company entity returned by the respective government service (where available).
	CompanyType *string `json:"company_type,omitempty"`
	// If you save your own VAT number in your dashboard, the reply will contain a unique consultation number. The consultation number enables you to prove to a tax administration of a Member State that you have checked a VAT number at the `requested` date, and obtained a validation result.
	ConsultationNumber *string `json:"consultation_number,omitempty"`
	// 2-letter ISO country code. Note that while Greek VAT numbers contain the `EL` country code, our response will return the ISO country code `GR`.
	CountryCode *string `json:"country_code,omitempty"`
	// ISO date at which the object was created.
	Created *time.Time `json:"created,omitempty"`
	// Unique identifier for the object.
	Id *string `json:"id,omitempty"`
	// Your original query.
	Query string `json:"query"`
	// ISO date at which the validation request was originally performed. Types `eu_vat` and `gb_vat` do not specify a time.
	Requested *time.Time `json:"requested,omitempty"`
	// Type of VAT number.
	Type *string `json:"type,omitempty"`
	// ISO date at which the object was updated.
	Updated *time.Time `json:"updated,omitempty"`
	// Boolean indicating whether the vat_number is registered for VAT. If government services are down, the value will be `null` and re-checked automatically for you.
	Valid *bool `json:"valid,omitempty"`
	// Boolean indicating whether the VAT number contained in `query` is in a valid format.
	ValidFormat *bool `json:"valid_format,omitempty"`
	// VAT number extracted from your query without the country code.
	VatNumber *string `json:"vat_number,omitempty"`
}

// NewValidation instantiates a new Validation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidation(query string) *Validation {
	this := Validation{}
	this.Query = query
	return &this
}

// NewValidationWithDefaults instantiates a new Validation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationWithDefaults() *Validation {
	this := Validation{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Validation) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validation) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Validation) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Validation) SetActive(v bool) {
	o.Active = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Validation) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validation) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Validation) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Validation) SetCode(v string) {
	o.Code = &v
}

// GetCompanyAddress returns the CompanyAddress field value if set, zero value otherwise.
func (o *Validation) GetCompanyAddress() string {
	if o == nil || IsNil(o.CompanyAddress) {
		var ret string
		return ret
	}
	return *o.CompanyAddress
}

// GetCompanyAddressOk returns a tuple with the CompanyAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validation) GetCompanyAddressOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyAddress) {
		return nil, false
	}
	return o.CompanyAddress, true
}

// HasCompanyAddress returns a boolean if a field has been set.
func (o *Validation) HasCompanyAddress() bool {
	if o != nil && !IsNil(o.CompanyAddress) {
		return true
	}

	return false
}

// SetCompanyAddress gets a reference to the given string and assigns it to the CompanyAddress field.
func (o *Validation) SetCompanyAddress(v string) {
	o.CompanyAddress = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *Validation) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validation) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *Validation) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *Validation) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetCompanyType returns the CompanyType field value if set, zero value otherwise.
func (o *Validation) GetCompanyType() string {
	if o == nil || IsNil(o.CompanyType) {
		var ret string
		return ret
	}
	return *o.CompanyType
}

// GetCompanyTypeOk returns a tuple with the CompanyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validation) GetCompanyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyType) {
		return nil, false
	}
	return o.CompanyType, true
}

// HasCompanyType returns a boolean if a field has been set.
func (o *Validation) HasCompanyType() bool {
	if o != nil && !IsNil(o.CompanyType) {
		return true
	}

	return false
}

// SetCompanyType gets a reference to the given string and assigns it to the CompanyType field.
func (o *Validation) SetCompanyType(v string) {
	o.CompanyType = &v
}

// GetConsultationNumber returns the ConsultationNumber field value if set, zero value otherwise.
func (o *Validation) GetConsultationNumber() string {
	if o == nil || IsNil(o.ConsultationNumber) {
		var ret string
		return ret
	}
	return *o.ConsultationNumber
}

// GetConsultationNumberOk returns a tuple with the ConsultationNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validation) GetConsultationNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ConsultationNumber) {
		return nil, false
	}
	return o.ConsultationNumber, true
}

// HasConsultationNumber returns a boolean if a field has been set.
func (o *Validation) HasConsultationNumber() bool {
	if o != nil && !IsNil(o.ConsultationNumber) {
		return true
	}

	return false
}

// SetConsultationNumber gets a reference to the given string and assigns it to the ConsultationNumber field.
func (o *Validation) SetConsultationNumber(v string) {
	o.ConsultationNumber = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *Validation) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validation) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *Validation) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *Validation) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Validation) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validation) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Validation) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Validation) SetCreated(v time.Time) {
	o.Created = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Validation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Validation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Validation) SetId(v string) {
	o.Id = &v
}

// GetQuery returns the Query field value
func (o *Validation) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *Validation) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *Validation) SetQuery(v string) {
	o.Query = v
}

// GetRequested returns the Requested field value if set, zero value otherwise.
func (o *Validation) GetRequested() time.Time {
	if o == nil || IsNil(o.Requested) {
		var ret time.Time
		return ret
	}
	return *o.Requested
}

// GetRequestedOk returns a tuple with the Requested field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validation) GetRequestedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Requested) {
		return nil, false
	}
	return o.Requested, true
}

// HasRequested returns a boolean if a field has been set.
func (o *Validation) HasRequested() bool {
	if o != nil && !IsNil(o.Requested) {
		return true
	}

	return false
}

// SetRequested gets a reference to the given time.Time and assigns it to the Requested field.
func (o *Validation) SetRequested(v time.Time) {
	o.Requested = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Validation) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validation) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Validation) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Validation) SetType(v string) {
	o.Type = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *Validation) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validation) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Validation) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *Validation) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *Validation) GetValid() bool {
	if o == nil || IsNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validation) GetValidOk() (*bool, bool) {
	if o == nil || IsNil(o.Valid) {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *Validation) HasValid() bool {
	if o != nil && !IsNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *Validation) SetValid(v bool) {
	o.Valid = &v
}

// GetValidFormat returns the ValidFormat field value if set, zero value otherwise.
func (o *Validation) GetValidFormat() bool {
	if o == nil || IsNil(o.ValidFormat) {
		var ret bool
		return ret
	}
	return *o.ValidFormat
}

// GetValidFormatOk returns a tuple with the ValidFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validation) GetValidFormatOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidFormat) {
		return nil, false
	}
	return o.ValidFormat, true
}

// HasValidFormat returns a boolean if a field has been set.
func (o *Validation) HasValidFormat() bool {
	if o != nil && !IsNil(o.ValidFormat) {
		return true
	}

	return false
}

// SetValidFormat gets a reference to the given bool and assigns it to the ValidFormat field.
func (o *Validation) SetValidFormat(v bool) {
	o.ValidFormat = &v
}

// GetVatNumber returns the VatNumber field value if set, zero value otherwise.
func (o *Validation) GetVatNumber() string {
	if o == nil || IsNil(o.VatNumber) {
		var ret string
		return ret
	}
	return *o.VatNumber
}

// GetVatNumberOk returns a tuple with the VatNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validation) GetVatNumberOk() (*string, bool) {
	if o == nil || IsNil(o.VatNumber) {
		return nil, false
	}
	return o.VatNumber, true
}

// HasVatNumber returns a boolean if a field has been set.
func (o *Validation) HasVatNumber() bool {
	if o != nil && !IsNil(o.VatNumber) {
		return true
	}

	return false
}

// SetVatNumber gets a reference to the given string and assigns it to the VatNumber field.
func (o *Validation) SetVatNumber(v string) {
	o.VatNumber = &v
}

func (o Validation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Validation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.CompanyAddress) {
		toSerialize["company_address"] = o.CompanyAddress
	}
	if !IsNil(o.CompanyName) {
		toSerialize["company_name"] = o.CompanyName
	}
	if !IsNil(o.CompanyType) {
		toSerialize["company_type"] = o.CompanyType
	}
	if !IsNil(o.ConsultationNumber) {
		toSerialize["consultation_number"] = o.ConsultationNumber
	}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["query"] = o.Query
	if !IsNil(o.Requested) {
		toSerialize["requested"] = o.Requested
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.Valid) {
		toSerialize["valid"] = o.Valid
	}
	if !IsNil(o.ValidFormat) {
		toSerialize["valid_format"] = o.ValidFormat
	}
	if !IsNil(o.VatNumber) {
		toSerialize["vat_number"] = o.VatNumber
	}
	return toSerialize, nil
}

type NullableValidation struct {
	value *Validation
	isSet bool
}

func (v NullableValidation) Get() *Validation {
	return v.value
}

func (v *NullableValidation) Set(val *Validation) {
	v.value = val
	v.isSet = true
}

func (v NullableValidation) IsSet() bool {
	return v.isSet
}

func (v *NullableValidation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidation(val *Validation) *NullableValidation {
	return &NullableValidation{value: val, isSet: true}
}

func (v NullableValidation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


