/*
Vatstack API Specification

A suite of VAT APIs which let you validate VAT numbers with government services, look up VAT rates by ISO country code, calculate price quotes with centralized VAT rules and store transactions with each sale for VAT reporting.

API version: 1.3.0
Contact: team@vatstack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vatstack

import (
	"encoding/json"
)

// checks if the Hit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Hit{}

// Hit Retrieve the number of hits you have used for the running month and the total capacity allocated to your current subscription plan.
type Hit struct {
	Supplies *HitSupplies `json:"supplies,omitempty"`
	Validations *HitValidations `json:"validations,omitempty"`
}

// NewHit instantiates a new Hit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHit() *Hit {
	this := Hit{}
	return &this
}

// NewHitWithDefaults instantiates a new Hit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHitWithDefaults() *Hit {
	this := Hit{}
	return &this
}

// GetSupplies returns the Supplies field value if set, zero value otherwise.
func (o *Hit) GetSupplies() HitSupplies {
	if o == nil || IsNil(o.Supplies) {
		var ret HitSupplies
		return ret
	}
	return *o.Supplies
}

// GetSuppliesOk returns a tuple with the Supplies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hit) GetSuppliesOk() (*HitSupplies, bool) {
	if o == nil || IsNil(o.Supplies) {
		return nil, false
	}
	return o.Supplies, true
}

// HasSupplies returns a boolean if a field has been set.
func (o *Hit) HasSupplies() bool {
	if o != nil && !IsNil(o.Supplies) {
		return true
	}

	return false
}

// SetSupplies gets a reference to the given HitSupplies and assigns it to the Supplies field.
func (o *Hit) SetSupplies(v HitSupplies) {
	o.Supplies = &v
}

// GetValidations returns the Validations field value if set, zero value otherwise.
func (o *Hit) GetValidations() HitValidations {
	if o == nil || IsNil(o.Validations) {
		var ret HitValidations
		return ret
	}
	return *o.Validations
}

// GetValidationsOk returns a tuple with the Validations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hit) GetValidationsOk() (*HitValidations, bool) {
	if o == nil || IsNil(o.Validations) {
		return nil, false
	}
	return o.Validations, true
}

// HasValidations returns a boolean if a field has been set.
func (o *Hit) HasValidations() bool {
	if o != nil && !IsNil(o.Validations) {
		return true
	}

	return false
}

// SetValidations gets a reference to the given HitValidations and assigns it to the Validations field.
func (o *Hit) SetValidations(v HitValidations) {
	o.Validations = &v
}

func (o Hit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Hit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Supplies) {
		toSerialize["supplies"] = o.Supplies
	}
	if !IsNil(o.Validations) {
		toSerialize["validations"] = o.Validations
	}
	return toSerialize, nil
}

type NullableHit struct {
	value *Hit
	isSet bool
}

func (v NullableHit) Get() *Hit {
	return v.value
}

func (v *NullableHit) Set(val *Hit) {
	v.value = val
	v.isSet = true
}

func (v NullableHit) IsSet() bool {
	return v.isSet
}

func (v *NullableHit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHit(val *Hit) *NullableHit {
	return &NullableHit{value: val, isSet: true}
}

func (v NullableHit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


