/*
Vatstack API Specification

A suite of VAT APIs which let you validate VAT numbers with government services, look up VAT rates by ISO country code, calculate price quotes with centralized VAT rules and store transactions with each sale for VAT reporting.

API version: 1.3.0
Contact: team@vatstack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vatstack

import (
	"encoding/json"
)

// checks if the Rate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rate{}

// Rate Keep the rates of your application up-to-date with a regular VAT rate lookup. This ensures that your invoice states the correct VAT across EU Member States. We have also started to add countries outside the EU and will keep them updated.
type Rate struct {
	// Abbreviation of `local_name`.
	Abbreviation *string `json:"abbreviation,omitempty"`
	Categories *RateCategories `json:"categories,omitempty"`
	// 2-letter ISO country code.
	CountryCode *string `json:"country_code,omitempty"`
	// Corresponding English name of `country_code`.
	CountryName *string `json:"country_name,omitempty"`
	// 3-letter ISO 4217 local currency code.
	Currency *string `json:"currency,omitempty"`
	// Localized name of the VAT identification number.
	LocalName *string `json:"local_name,omitempty"`
	// Boolean indicating whether the country is an EU Member State.
	MemberState *bool `json:"member_state,omitempty"`
	// 3-letter ISO 4217 local currency code.
	ReducedRates []float64 `json:"reduced_rates,omitempty"`
	// Standard VAT rate in percent.
	StandardRate *float64 `json:"standard_rate,omitempty"`
	// Abbreviation of `vat_local_name`.
	VatAbbreviation *string `json:"vat_abbreviation,omitempty"`
	// Localized name of the VAT.
	VatLocalName *string `json:"vat_local_name,omitempty"`
}

// NewRate instantiates a new Rate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRate() *Rate {
	this := Rate{}
	return &this
}

// NewRateWithDefaults instantiates a new Rate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateWithDefaults() *Rate {
	this := Rate{}
	return &this
}

// GetAbbreviation returns the Abbreviation field value if set, zero value otherwise.
func (o *Rate) GetAbbreviation() string {
	if o == nil || IsNil(o.Abbreviation) {
		var ret string
		return ret
	}
	return *o.Abbreviation
}

// GetAbbreviationOk returns a tuple with the Abbreviation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rate) GetAbbreviationOk() (*string, bool) {
	if o == nil || IsNil(o.Abbreviation) {
		return nil, false
	}
	return o.Abbreviation, true
}

// HasAbbreviation returns a boolean if a field has been set.
func (o *Rate) HasAbbreviation() bool {
	if o != nil && !IsNil(o.Abbreviation) {
		return true
	}

	return false
}

// SetAbbreviation gets a reference to the given string and assigns it to the Abbreviation field.
func (o *Rate) SetAbbreviation(v string) {
	o.Abbreviation = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *Rate) GetCategories() RateCategories {
	if o == nil || IsNil(o.Categories) {
		var ret RateCategories
		return ret
	}
	return *o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rate) GetCategoriesOk() (*RateCategories, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *Rate) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given RateCategories and assigns it to the Categories field.
func (o *Rate) SetCategories(v RateCategories) {
	o.Categories = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *Rate) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rate) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *Rate) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *Rate) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetCountryName returns the CountryName field value if set, zero value otherwise.
func (o *Rate) GetCountryName() string {
	if o == nil || IsNil(o.CountryName) {
		var ret string
		return ret
	}
	return *o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rate) GetCountryNameOk() (*string, bool) {
	if o == nil || IsNil(o.CountryName) {
		return nil, false
	}
	return o.CountryName, true
}

// HasCountryName returns a boolean if a field has been set.
func (o *Rate) HasCountryName() bool {
	if o != nil && !IsNil(o.CountryName) {
		return true
	}

	return false
}

// SetCountryName gets a reference to the given string and assigns it to the CountryName field.
func (o *Rate) SetCountryName(v string) {
	o.CountryName = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Rate) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rate) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Rate) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Rate) SetCurrency(v string) {
	o.Currency = &v
}

// GetLocalName returns the LocalName field value if set, zero value otherwise.
func (o *Rate) GetLocalName() string {
	if o == nil || IsNil(o.LocalName) {
		var ret string
		return ret
	}
	return *o.LocalName
}

// GetLocalNameOk returns a tuple with the LocalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rate) GetLocalNameOk() (*string, bool) {
	if o == nil || IsNil(o.LocalName) {
		return nil, false
	}
	return o.LocalName, true
}

// HasLocalName returns a boolean if a field has been set.
func (o *Rate) HasLocalName() bool {
	if o != nil && !IsNil(o.LocalName) {
		return true
	}

	return false
}

// SetLocalName gets a reference to the given string and assigns it to the LocalName field.
func (o *Rate) SetLocalName(v string) {
	o.LocalName = &v
}

// GetMemberState returns the MemberState field value if set, zero value otherwise.
func (o *Rate) GetMemberState() bool {
	if o == nil || IsNil(o.MemberState) {
		var ret bool
		return ret
	}
	return *o.MemberState
}

// GetMemberStateOk returns a tuple with the MemberState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rate) GetMemberStateOk() (*bool, bool) {
	if o == nil || IsNil(o.MemberState) {
		return nil, false
	}
	return o.MemberState, true
}

// HasMemberState returns a boolean if a field has been set.
func (o *Rate) HasMemberState() bool {
	if o != nil && !IsNil(o.MemberState) {
		return true
	}

	return false
}

// SetMemberState gets a reference to the given bool and assigns it to the MemberState field.
func (o *Rate) SetMemberState(v bool) {
	o.MemberState = &v
}

// GetReducedRates returns the ReducedRates field value if set, zero value otherwise.
func (o *Rate) GetReducedRates() []float64 {
	if o == nil || IsNil(o.ReducedRates) {
		var ret []float64
		return ret
	}
	return o.ReducedRates
}

// GetReducedRatesOk returns a tuple with the ReducedRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rate) GetReducedRatesOk() ([]float64, bool) {
	if o == nil || IsNil(o.ReducedRates) {
		return nil, false
	}
	return o.ReducedRates, true
}

// HasReducedRates returns a boolean if a field has been set.
func (o *Rate) HasReducedRates() bool {
	if o != nil && !IsNil(o.ReducedRates) {
		return true
	}

	return false
}

// SetReducedRates gets a reference to the given []float64 and assigns it to the ReducedRates field.
func (o *Rate) SetReducedRates(v []float64) {
	o.ReducedRates = v
}

// GetStandardRate returns the StandardRate field value if set, zero value otherwise.
func (o *Rate) GetStandardRate() float64 {
	if o == nil || IsNil(o.StandardRate) {
		var ret float64
		return ret
	}
	return *o.StandardRate
}

// GetStandardRateOk returns a tuple with the StandardRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rate) GetStandardRateOk() (*float64, bool) {
	if o == nil || IsNil(o.StandardRate) {
		return nil, false
	}
	return o.StandardRate, true
}

// HasStandardRate returns a boolean if a field has been set.
func (o *Rate) HasStandardRate() bool {
	if o != nil && !IsNil(o.StandardRate) {
		return true
	}

	return false
}

// SetStandardRate gets a reference to the given float64 and assigns it to the StandardRate field.
func (o *Rate) SetStandardRate(v float64) {
	o.StandardRate = &v
}

// GetVatAbbreviation returns the VatAbbreviation field value if set, zero value otherwise.
func (o *Rate) GetVatAbbreviation() string {
	if o == nil || IsNil(o.VatAbbreviation) {
		var ret string
		return ret
	}
	return *o.VatAbbreviation
}

// GetVatAbbreviationOk returns a tuple with the VatAbbreviation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rate) GetVatAbbreviationOk() (*string, bool) {
	if o == nil || IsNil(o.VatAbbreviation) {
		return nil, false
	}
	return o.VatAbbreviation, true
}

// HasVatAbbreviation returns a boolean if a field has been set.
func (o *Rate) HasVatAbbreviation() bool {
	if o != nil && !IsNil(o.VatAbbreviation) {
		return true
	}

	return false
}

// SetVatAbbreviation gets a reference to the given string and assigns it to the VatAbbreviation field.
func (o *Rate) SetVatAbbreviation(v string) {
	o.VatAbbreviation = &v
}

// GetVatLocalName returns the VatLocalName field value if set, zero value otherwise.
func (o *Rate) GetVatLocalName() string {
	if o == nil || IsNil(o.VatLocalName) {
		var ret string
		return ret
	}
	return *o.VatLocalName
}

// GetVatLocalNameOk returns a tuple with the VatLocalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rate) GetVatLocalNameOk() (*string, bool) {
	if o == nil || IsNil(o.VatLocalName) {
		return nil, false
	}
	return o.VatLocalName, true
}

// HasVatLocalName returns a boolean if a field has been set.
func (o *Rate) HasVatLocalName() bool {
	if o != nil && !IsNil(o.VatLocalName) {
		return true
	}

	return false
}

// SetVatLocalName gets a reference to the given string and assigns it to the VatLocalName field.
func (o *Rate) SetVatLocalName(v string) {
	o.VatLocalName = &v
}

func (o Rate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Abbreviation) {
		toSerialize["abbreviation"] = o.Abbreviation
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.CountryName) {
		toSerialize["country_name"] = o.CountryName
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.LocalName) {
		toSerialize["local_name"] = o.LocalName
	}
	if !IsNil(o.MemberState) {
		toSerialize["member_state"] = o.MemberState
	}
	if !IsNil(o.ReducedRates) {
		toSerialize["reduced_rates"] = o.ReducedRates
	}
	if !IsNil(o.StandardRate) {
		toSerialize["standard_rate"] = o.StandardRate
	}
	if !IsNil(o.VatAbbreviation) {
		toSerialize["vat_abbreviation"] = o.VatAbbreviation
	}
	if !IsNil(o.VatLocalName) {
		toSerialize["vat_local_name"] = o.VatLocalName
	}
	return toSerialize, nil
}

type NullableRate struct {
	value *Rate
	isSet bool
}

func (v NullableRate) Get() *Rate {
	return v.value
}

func (v *NullableRate) Set(val *Rate) {
	v.value = val
	v.isSet = true
}

func (v NullableRate) IsSet() bool {
	return v.isSet
}

func (v *NullableRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRate(val *Rate) *NullableRate {
	return &NullableRate{value: val, isSet: true}
}

func (v NullableRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


