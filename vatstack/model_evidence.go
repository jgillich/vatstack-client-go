/*
Vatstack API Specification

A suite of VAT APIs which let you validate VAT numbers with government services, look up VAT rates by ISO country code, calculate price quotes with centralized VAT rules and store transactions with each sale for VAT reporting.

API version: 1.3.0
Contact: team@vatstack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vatstack

import (
	"encoding/json"
	"time"
)

// checks if the Evidence type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Evidence{}

// Evidence Store pieces of evidence that confirm your customer’s location. Evidence object can be attached to a supply object and it can only be attached to one supply object at a time.
type Evidence struct {
	BankAddress *EvidenceBankAddress `json:"bank_address,omitempty"`
	BillingAddress *EvidenceBillingAddress `json:"billing_address,omitempty"`
	// ISO date at which the object was created.
	Created *time.Time `json:"created,omitempty"`
	IpAddress *EvidenceIpAddress `json:"ip_address,omitempty"`
	// Unique identifier for the object.
	Id *string `json:"id,omitempty"`
	// Required pieces of evidence according to your account’s regional settings.
	RequiredCount *int32 `json:"required_count,omitempty"`
	// ISO date at which the object was updated.
	Updated *time.Time `json:"updated,omitempty"`
}

// NewEvidence instantiates a new Evidence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvidence() *Evidence {
	this := Evidence{}
	return &this
}

// NewEvidenceWithDefaults instantiates a new Evidence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvidenceWithDefaults() *Evidence {
	this := Evidence{}
	return &this
}

// GetBankAddress returns the BankAddress field value if set, zero value otherwise.
func (o *Evidence) GetBankAddress() EvidenceBankAddress {
	if o == nil || IsNil(o.BankAddress) {
		var ret EvidenceBankAddress
		return ret
	}
	return *o.BankAddress
}

// GetBankAddressOk returns a tuple with the BankAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetBankAddressOk() (*EvidenceBankAddress, bool) {
	if o == nil || IsNil(o.BankAddress) {
		return nil, false
	}
	return o.BankAddress, true
}

// HasBankAddress returns a boolean if a field has been set.
func (o *Evidence) HasBankAddress() bool {
	if o != nil && !IsNil(o.BankAddress) {
		return true
	}

	return false
}

// SetBankAddress gets a reference to the given EvidenceBankAddress and assigns it to the BankAddress field.
func (o *Evidence) SetBankAddress(v EvidenceBankAddress) {
	o.BankAddress = &v
}

// GetBillingAddress returns the BillingAddress field value if set, zero value otherwise.
func (o *Evidence) GetBillingAddress() EvidenceBillingAddress {
	if o == nil || IsNil(o.BillingAddress) {
		var ret EvidenceBillingAddress
		return ret
	}
	return *o.BillingAddress
}

// GetBillingAddressOk returns a tuple with the BillingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetBillingAddressOk() (*EvidenceBillingAddress, bool) {
	if o == nil || IsNil(o.BillingAddress) {
		return nil, false
	}
	return o.BillingAddress, true
}

// HasBillingAddress returns a boolean if a field has been set.
func (o *Evidence) HasBillingAddress() bool {
	if o != nil && !IsNil(o.BillingAddress) {
		return true
	}

	return false
}

// SetBillingAddress gets a reference to the given EvidenceBillingAddress and assigns it to the BillingAddress field.
func (o *Evidence) SetBillingAddress(v EvidenceBillingAddress) {
	o.BillingAddress = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Evidence) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Evidence) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Evidence) SetCreated(v time.Time) {
	o.Created = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *Evidence) GetIpAddress() EvidenceIpAddress {
	if o == nil || IsNil(o.IpAddress) {
		var ret EvidenceIpAddress
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetIpAddressOk() (*EvidenceIpAddress, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *Evidence) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given EvidenceIpAddress and assigns it to the IpAddress field.
func (o *Evidence) SetIpAddress(v EvidenceIpAddress) {
	o.IpAddress = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Evidence) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Evidence) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Evidence) SetId(v string) {
	o.Id = &v
}

// GetRequiredCount returns the RequiredCount field value if set, zero value otherwise.
func (o *Evidence) GetRequiredCount() int32 {
	if o == nil || IsNil(o.RequiredCount) {
		var ret int32
		return ret
	}
	return *o.RequiredCount
}

// GetRequiredCountOk returns a tuple with the RequiredCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetRequiredCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RequiredCount) {
		return nil, false
	}
	return o.RequiredCount, true
}

// HasRequiredCount returns a boolean if a field has been set.
func (o *Evidence) HasRequiredCount() bool {
	if o != nil && !IsNil(o.RequiredCount) {
		return true
	}

	return false
}

// SetRequiredCount gets a reference to the given int32 and assigns it to the RequiredCount field.
func (o *Evidence) SetRequiredCount(v int32) {
	o.RequiredCount = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *Evidence) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Evidence) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Evidence) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *Evidence) SetUpdated(v time.Time) {
	o.Updated = &v
}

func (o Evidence) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Evidence) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BankAddress) {
		toSerialize["bank_address"] = o.BankAddress
	}
	if !IsNil(o.BillingAddress) {
		toSerialize["billing_address"] = o.BillingAddress
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.RequiredCount) {
		toSerialize["required_count"] = o.RequiredCount
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullableEvidence struct {
	value *Evidence
	isSet bool
}

func (v NullableEvidence) Get() *Evidence {
	return v.value
}

func (v *NullableEvidence) Set(val *Evidence) {
	v.value = val
	v.isSet = true
}

func (v NullableEvidence) IsSet() bool {
	return v.isSet
}

func (v *NullableEvidence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvidence(val *Evidence) *NullableEvidence {
	return &NullableEvidence{value: val, isSet: true}
}

func (v NullableEvidence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvidence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


