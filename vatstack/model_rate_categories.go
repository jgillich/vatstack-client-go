/*
Vatstack API Specification

A suite of VAT APIs which let you validate VAT numbers with government services, look up VAT rates by ISO country code, calculate price quotes with centralized VAT rules and store transactions with each sale for VAT reporting.

API version: 1.3.0
Contact: team@vatstack.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vatstack

import (
	"encoding/json"
)

// checks if the RateCategories type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateCategories{}

// RateCategories struct for RateCategories
type RateCategories struct {
	Audiobook *float64 `json:"audiobook,omitempty"`
	Broadcasting *float64 `json:"broadcasting,omitempty"`
	Ebook *float64 `json:"ebook,omitempty"`
	Eperiodical *float64 `json:"eperiodical,omitempty"`
	Eservice *float64 `json:"eservice,omitempty"`
	Telecommunication *float64 `json:"telecommunication,omitempty"`
}

// NewRateCategories instantiates a new RateCategories object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateCategories() *RateCategories {
	this := RateCategories{}
	return &this
}

// NewRateCategoriesWithDefaults instantiates a new RateCategories object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateCategoriesWithDefaults() *RateCategories {
	this := RateCategories{}
	return &this
}

// GetAudiobook returns the Audiobook field value if set, zero value otherwise.
func (o *RateCategories) GetAudiobook() float64 {
	if o == nil || IsNil(o.Audiobook) {
		var ret float64
		return ret
	}
	return *o.Audiobook
}

// GetAudiobookOk returns a tuple with the Audiobook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateCategories) GetAudiobookOk() (*float64, bool) {
	if o == nil || IsNil(o.Audiobook) {
		return nil, false
	}
	return o.Audiobook, true
}

// HasAudiobook returns a boolean if a field has been set.
func (o *RateCategories) HasAudiobook() bool {
	if o != nil && !IsNil(o.Audiobook) {
		return true
	}

	return false
}

// SetAudiobook gets a reference to the given float64 and assigns it to the Audiobook field.
func (o *RateCategories) SetAudiobook(v float64) {
	o.Audiobook = &v
}

// GetBroadcasting returns the Broadcasting field value if set, zero value otherwise.
func (o *RateCategories) GetBroadcasting() float64 {
	if o == nil || IsNil(o.Broadcasting) {
		var ret float64
		return ret
	}
	return *o.Broadcasting
}

// GetBroadcastingOk returns a tuple with the Broadcasting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateCategories) GetBroadcastingOk() (*float64, bool) {
	if o == nil || IsNil(o.Broadcasting) {
		return nil, false
	}
	return o.Broadcasting, true
}

// HasBroadcasting returns a boolean if a field has been set.
func (o *RateCategories) HasBroadcasting() bool {
	if o != nil && !IsNil(o.Broadcasting) {
		return true
	}

	return false
}

// SetBroadcasting gets a reference to the given float64 and assigns it to the Broadcasting field.
func (o *RateCategories) SetBroadcasting(v float64) {
	o.Broadcasting = &v
}

// GetEbook returns the Ebook field value if set, zero value otherwise.
func (o *RateCategories) GetEbook() float64 {
	if o == nil || IsNil(o.Ebook) {
		var ret float64
		return ret
	}
	return *o.Ebook
}

// GetEbookOk returns a tuple with the Ebook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateCategories) GetEbookOk() (*float64, bool) {
	if o == nil || IsNil(o.Ebook) {
		return nil, false
	}
	return o.Ebook, true
}

// HasEbook returns a boolean if a field has been set.
func (o *RateCategories) HasEbook() bool {
	if o != nil && !IsNil(o.Ebook) {
		return true
	}

	return false
}

// SetEbook gets a reference to the given float64 and assigns it to the Ebook field.
func (o *RateCategories) SetEbook(v float64) {
	o.Ebook = &v
}

// GetEperiodical returns the Eperiodical field value if set, zero value otherwise.
func (o *RateCategories) GetEperiodical() float64 {
	if o == nil || IsNil(o.Eperiodical) {
		var ret float64
		return ret
	}
	return *o.Eperiodical
}

// GetEperiodicalOk returns a tuple with the Eperiodical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateCategories) GetEperiodicalOk() (*float64, bool) {
	if o == nil || IsNil(o.Eperiodical) {
		return nil, false
	}
	return o.Eperiodical, true
}

// HasEperiodical returns a boolean if a field has been set.
func (o *RateCategories) HasEperiodical() bool {
	if o != nil && !IsNil(o.Eperiodical) {
		return true
	}

	return false
}

// SetEperiodical gets a reference to the given float64 and assigns it to the Eperiodical field.
func (o *RateCategories) SetEperiodical(v float64) {
	o.Eperiodical = &v
}

// GetEservice returns the Eservice field value if set, zero value otherwise.
func (o *RateCategories) GetEservice() float64 {
	if o == nil || IsNil(o.Eservice) {
		var ret float64
		return ret
	}
	return *o.Eservice
}

// GetEserviceOk returns a tuple with the Eservice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateCategories) GetEserviceOk() (*float64, bool) {
	if o == nil || IsNil(o.Eservice) {
		return nil, false
	}
	return o.Eservice, true
}

// HasEservice returns a boolean if a field has been set.
func (o *RateCategories) HasEservice() bool {
	if o != nil && !IsNil(o.Eservice) {
		return true
	}

	return false
}

// SetEservice gets a reference to the given float64 and assigns it to the Eservice field.
func (o *RateCategories) SetEservice(v float64) {
	o.Eservice = &v
}

// GetTelecommunication returns the Telecommunication field value if set, zero value otherwise.
func (o *RateCategories) GetTelecommunication() float64 {
	if o == nil || IsNil(o.Telecommunication) {
		var ret float64
		return ret
	}
	return *o.Telecommunication
}

// GetTelecommunicationOk returns a tuple with the Telecommunication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateCategories) GetTelecommunicationOk() (*float64, bool) {
	if o == nil || IsNil(o.Telecommunication) {
		return nil, false
	}
	return o.Telecommunication, true
}

// HasTelecommunication returns a boolean if a field has been set.
func (o *RateCategories) HasTelecommunication() bool {
	if o != nil && !IsNil(o.Telecommunication) {
		return true
	}

	return false
}

// SetTelecommunication gets a reference to the given float64 and assigns it to the Telecommunication field.
func (o *RateCategories) SetTelecommunication(v float64) {
	o.Telecommunication = &v
}

func (o RateCategories) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateCategories) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Audiobook) {
		toSerialize["audiobook"] = o.Audiobook
	}
	if !IsNil(o.Broadcasting) {
		toSerialize["broadcasting"] = o.Broadcasting
	}
	if !IsNil(o.Ebook) {
		toSerialize["ebook"] = o.Ebook
	}
	if !IsNil(o.Eperiodical) {
		toSerialize["eperiodical"] = o.Eperiodical
	}
	if !IsNil(o.Eservice) {
		toSerialize["eservice"] = o.Eservice
	}
	if !IsNil(o.Telecommunication) {
		toSerialize["telecommunication"] = o.Telecommunication
	}
	return toSerialize, nil
}

type NullableRateCategories struct {
	value *RateCategories
	isSet bool
}

func (v NullableRateCategories) Get() *RateCategories {
	return v.value
}

func (v *NullableRateCategories) Set(val *RateCategories) {
	v.value = val
	v.isSet = true
}

func (v NullableRateCategories) IsSet() bool {
	return v.isSet
}

func (v *NullableRateCategories) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateCategories(val *RateCategories) *NullableRateCategories {
	return &NullableRateCategories{value: val, isSet: true}
}

func (v NullableRateCategories) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateCategories) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


